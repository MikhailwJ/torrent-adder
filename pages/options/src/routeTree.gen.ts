/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as SettingsImport } from './routes/settings';
import { Route as NotificationsImport } from './routes/notifications';
import { Route as LinkCatchingImport } from './routes/link-catching';
import { Route as AboutImport } from './routes/about';
import { Route as IndexImport } from './routes/index';

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any);

const NotificationsRoute = NotificationsImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any);

const LinkCatchingRoute = LinkCatchingImport.update({
  id: '/link-catching',
  path: '/link-catching',
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    '/link-catching': {
      id: '/link-catching';
      path: '/link-catching';
      fullPath: '/link-catching';
      preLoaderRoute: typeof LinkCatchingImport;
      parentRoute: typeof rootRoute;
    };
    '/notifications': {
      id: '/notifications';
      path: '/notifications';
      fullPath: '/notifications';
      preLoaderRoute: typeof NotificationsImport;
      parentRoute: typeof rootRoute;
    };
    '/settings': {
      id: '/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/link-catching': typeof LinkCatchingRoute;
  '/notifications': typeof NotificationsRoute;
  '/settings': typeof SettingsRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/link-catching': typeof LinkCatchingRoute;
  '/notifications': typeof NotificationsRoute;
  '/settings': typeof SettingsRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/link-catching': typeof LinkCatchingRoute;
  '/notifications': typeof NotificationsRoute;
  '/settings': typeof SettingsRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/about' | '/link-catching' | '/notifications' | '/settings';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/about' | '/link-catching' | '/notifications' | '/settings';
  id: '__root__' | '/' | '/about' | '/link-catching' | '/notifications' | '/settings';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutRoute: typeof AboutRoute;
  LinkCatchingRoute: typeof LinkCatchingRoute;
  NotificationsRoute: typeof NotificationsRoute;
  SettingsRoute: typeof SettingsRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LinkCatchingRoute: LinkCatchingRoute,
  NotificationsRoute: NotificationsRoute,
  SettingsRoute: SettingsRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/link-catching",
        "/notifications",
        "/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/link-catching": {
      "filePath": "link-catching.tsx"
    },
    "/notifications": {
      "filePath": "notifications.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
